@model PaginatedList<StoreInventory>

@{
    ViewBag.Title = "Store Inventory";
}

<h2>Store Inventory</h2>

<div>
    @*<a asp-action="Create"><input type="button" value="Create New Inventory Item Stock Request" class="btn btn-default" /> </a>*@
    <a asp-action="Index"><input type="button" value="Back to store selection" class="btn btn-default" /> </a>
</div>

<form asp-action="List" method="get">
    <p>
        Find By Name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
        <input type="submit" value="Search" class="btn btn-default" />
        <a asp-action="List">
            <input type="button" value="Back to Full List" class="btn btn-default" />
        </a>
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="List" asp-route-sortOrder="@ViewData["IDSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Product ID</a>
            </th>
            <th>
                <a asp-action="List" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Product Name</a>
            </th>
            <th>
                <a asp-action="List" asp-route-sortOrder="@ViewData["StockSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Current Stock</a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StockLevel)
                </td>
                <td>
                    <a  asp-controller="ShoppingCart" asp-action="AddToShoppingCart" asp-route-storeId="@item.StoreID" asp-route-productId="@item.ProductID">Add to Cart</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
@* The paging buttons are displayed by tag helpers *@
<a asp-action="List"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="List"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
